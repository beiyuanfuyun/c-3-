//#define _CRT_SECURE_NO_WARNINGS
////03-面向对象的课程
////     01面向过程
////      *02面向对象
////        *03类和对象
////          04结构体和类的区别
////
//
//
////------------------------------------------01--------------------------------
////c语言的编程就是一个面向过程的编程
////他遵循一个“从上到下”的程序设计
//// 优点：程序的结构简单，大问题化为小问题，小问题解决了，大问题就ok了
//// 缺点：数据和操作往往都是分离的，不具备封装性。多人开发合作时，问题很多,多对一的操作
////-----------------------------------------------------------------------------
//
//
////-----------------------02--------------------------------------------
//// 1.面向对象是面向过程的继承和发展，程序对现实世界的抽象和描述
////       现实世界的基本单元的物体在程序中对应的基本单元就是对象
//// 2.面向对象可以理解为：
////    现实世界是由对象组成的，无论大小，万物皆可对象
//// 3。对象在程序中的状态可以分为两种
////      1.描述对象的状态或者属性的数据（边梁）
////       2.描述对象的行为或者功能的方法
//// 4.高内聚（关联性加强）   低耦合（部门是分开的）
//// 5.面向对象的三大特点：封装(03课)、继承、多态
//// 
//// 初步理解为  类 类型的变量，例如int a=10;则指力的a可以说是对象，class node{};  node n1;这里的n1相当于对像
//// --------------------------------------------------------------------
//
//
////-------------------03------------------------------------------------
////1.类是用户自定义的一种数据类型（结构体的私有版+全能版，可以在结构体内加入函数是在c++环境下加的内容）
////2.对象是类的实例化
//// 通过类这种类型定义出来的变量称为对象
////    三种访问控制属性：
////     1.pulic--公共访问
////     2.private-私有访问（只有我可以用的）
////     3.protected--保护访问（封装，只有我和我的儿子可以用的，涉及到 继承 的问题）
//// --------------------------------------------------------------------
//
//
////------------------04------------------------------------
////命名空间与类的区间的区别
////命名空间中的 a,b,c只有一份且还是一样的且还是有限的，而类可以无限的产生
//
////类和结构体的区别
////类就像是结构体升级而来的，结构体里面的东西是默认公有属性的类，类则默认为私有属性的结构体，
////在c++环境下结构体已经升级可以保存函数，使用函数是允许的
////结构体默认公有访问，默认公有继承
//
//#include<iostream>
//#include<string>
//using namespace std;
//
////------------03-----------------
////类的关键字+类名{};//有;代表为定义域，而没有的为作用域 
//// 
//class Person
//{
//	//类中的成员为默认为私有，可以加入public:加入，以后的数据就是公有，当然还可以改
//public ://公有
//	//数据
//	int age=9;
//private://私有
//	int money=9;
//public:
//	//行为
//	int getmoney()//封装性（可以用指针破解）
//	{
//		return money;
//    }
//};
////----------------------------------------------------------------
//
//class MyNode
//{
//	int data;
//	
//public:
//    MyNode* pNext;
//	void setData(int val);//但是会默认内联，会用空间换取时间
//	/*{
//		data = val;
//	}*/
//	int GetData()
//	{
//		return data;
//	}
//};
//
////类内声明，类外定义-目的在于 规避内联的问题
//void MyNode::setData(int val)//需要作用域的说明
//{
//	data = val;
//}
//
//class Mylist
//{
//	MyNode* pHead;
//	MyNode* pEnd;
//	int length;//数据量
//public:
//	//插入：
//	void insert(int)
//	{
//
//	}
//	void deleteNode(int)
//	{
//
//	}
//	void Clear(int)
//	{
//
//	}
//	void init(int)
//	{
//
//	}
//};
////------------------------------------------------------------------
//
//
//
//int main()
//{
//	//---------------03-------------------------------------------------------
//	//Person p1;
//	//p1.age = 10;
//	//cout << p1.getmoney() << endl;
//	//cout << &p1 << endl;
//
//	////int* ptr = (int*)&p1;
//	////*(ptr + 1) = 0;//这个操作很危险，可能会修改为某一类区域，可能会改变系统东西，指针破解封装性
//
//	////当然现在有专门的软件可以将源码打乱，可以防止被破解
//	//-----------------------------------------------------------------------------------
//
//	//-------------------------------------------------
//	/*Person* p2 = new Person[10];
//	p2->age = 20;
//	cout << p2->getmoney() << endl;
//	delete p2;*/
//
//	/*MyNode* n1, *n2;
//	n1 = new MyNode;
//	n2 = new MyNode;
//	n1->setData(1);
//	n1->pNext = n2;
//	n2->setData(2);
//	cout << n1->GetData() << endl;
//	cout << n2->GetData() << endl;*/
//
//	Mylist s1;
//	s1.insert(0);
//	for (int i = 1; i < 100; i++)
//	{
//		s1.insert(i);
//	}
//	return 0;
//}
